from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import ParseMode, CallbackQuery
from aiogram.utils.markdown import text

from telegram_bot.keyboards import login_markup, authed_markup, change_params_markup, input_values_markup
from telegram_bot.init_bot import dp
from databases import get_password, update_password, update_param


class FSMLogin(StatesGroup):
    password = State()


class FSMChangePassword(StatesGroup):
    password = State()


class FSMChangeParams(StatesGroup):
    param = State()
    value = State()


@dp.message_handler(commands=['moderate'], state=None)
async def process_moderate_command(message: types.Message):
    await FSMLogin.password.set()
    await message.answer(text('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –í–∞—Å üëã',
                              f'–í—ã –∑–∞—à–ª–∏ –≤ —Ä–µ–∂–∏–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ üìù',
                              f'\n–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å üóù –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏',
                              sep="\n"),
                         parse_mode=ParseMode.MARKDOWN,
                         reply_markup=login_markup)


@dp.message_handler(state=FSMLogin.password)
async def process_password_input(message: types.Message, state: FSMContext):
    if message.text == get_password():
        await message.answer(text('–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã üö™',
                                  '–í—ã–±–µ—Ä–∏—Ç–µ –í–∞—à–∏ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ —Å–Ω–∏–∑—É üëá',
                                  sep="\n\n"),
                             parse_mode=ParseMode.MARKDOWN,
                             reply_markup=authed_markup)
        await state.finish()
    else:
        await message.answer(text('üìõ –í–≤–µ–¥—ë–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å üìõ',
                                  '–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É üîÑ',
                                  sep="\n"),
                             parse_mode=ParseMode.MARKDOWN,
                             reply_markup=login_markup)


@dp.callback_query_handler(text='change_password', state=None)
async def process_change_password_button(callback: CallbackQuery):
    await FSMChangePassword.password.set()
    await callback.message.answer(text('–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –ø–∞—Ä–æ–ª—å üëá‚å®'),
                                  parse_mode=ParseMode.MARKDOWN,
                                  reply_markup=input_values_markup)
    await callback.answer()


@dp.message_handler(state=FSMChangePassword.password)
async def process_password_input(message: types.Message, state: FSMContext):
    update_password(message.text)
    await message.answer(text('–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω üëè'),
                         parse_mode=ParseMode.MARKDOWN,
                         reply_markup=authed_markup)
    await state.finish()


@dp.callback_query_handler(text='change_params', state=None)
async def process_change_params_button(callback: CallbackQuery):
    await FSMChangeParams.param.set()
    await callback.message.answer(text('–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä, –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–µ–ª–∏ –±—ã –∏–∑–º–µ–Ω–∏—Ç—å, —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ '
                                       '–Ω–∏–∂–µ üëá'),
                                  parse_mode=ParseMode.MARKDOWN,
                                  reply_markup=change_params_markup)
    await callback.answer()


@dp.callback_query_handler(text='change_currency_div', state=FSMChangeParams.param)
async def process_change_currency_div_button(callback: CallbackQuery, state=FSMContext):
    await callback.message.answer(text('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ üëá‚å®',
                                       '(–¥–æ–ª–∏ –≤–≤–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: 23.4)',
                                       sep="\n"),
                                  parse_mode=ParseMode.MARKDOWN,
                                  reply_markup=input_values_markup)
    await callback.answer()
    async with state.proxy() as data:
        data['param'] = 'currency_div'
    await FSMChangeParams.next()


@dp.callback_query_handler(text='change_dop', state=FSMChangeParams.param)
async def process_change_change_dop_button(callback: CallbackQuery, state=FSMContext):
    await callback.message.answer(text('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ üëá‚å® (–¥–æ–ª–∏ –≤–≤–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: 23.4)'),
                                  parse_mode=ParseMode.MARKDOWN,
                                  reply_markup=input_values_markup)
    await callback.answer()
    async with state.proxy() as data:
        data['param'] = 'dop'
    await FSMChangeParams.next()


@dp.message_handler(state=FSMChangeParams.value)
async def process_param_value(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            value = float(message.text)
            update_param(data['param'], value)
            await message.answer(text('–ó–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚úÖ'),
                                 parse_mode=ParseMode.MARKDOWN,
                                 reply_markup=authed_markup)
        await state.finish()
    except (TypeError, ValueError):
        await message.answer(text('üõë –í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ üõë',
                                  '–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ (–¥–æ–ª–∏ –≤–≤–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: 23.4)',
                                  '–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É üîÑ',
                                  sep="\n"),
                             parse_mode=ParseMode.MARKDOWN,
                             reply_markup=input_values_markup)


@dp.callback_query_handler(text='return', state="*")
@dp.callback_query_handler(text='cancel_admin', state="*")
async def process_cancel_button(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(text('–í—ã–±–µ—Ä–∏—Ç–µ –í–∞—à–∏ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ —Å–Ω–∏–∑—É üëá'),
                                  parse_mode=ParseMode.MARKDOWN,
                                  reply_markup=authed_markup)
    await callback.answer()
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()


@dp.callback_query_handler(text='exit_admin', state="*")
async def process_exit_button(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(text("–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—É üîô"))
    await callback.answer()
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()


def register_admin_handlers(dp: Dispatcher):
    dp.register_message_handler(process_moderate_command, commands=['moderate'], state=None)
    dp.register_message_handler(process_password_input, state=FSMLogin.password)
    dp.callback_query_handler(process_change_password_button, state=None)
    dp.register_message_handler(process_password_input, state=FSMChangePassword.password)
    dp.callback_query_handler(process_change_params_button, state=None)
    dp.callback_query_handler(process_change_currency_div_button, state=FSMChangeParams.param)
    dp.callback_query_handler(process_change_change_dop_button, state=FSMChangeParams.param)
    dp.message_handler(process_param_value, state=FSMChangeParams.value)
    dp.register_callback_query_handler(process_cancel_button, state="*")
    dp.register_callback_query_handler(process_exit_button, state="*")
