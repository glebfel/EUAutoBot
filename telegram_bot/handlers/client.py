from aiogram import types, Dispatcher
from aiogram.types import ParseMode, CallbackQuery
from aiogram.utils.markdown import text, italic, bold
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from telegram_bot.init_bot import dp
from telegram_bot.inline_keyboard import start_markup, error_markup
from parser import get_car_data, calculate_customs
from exceptions import AnotherUrlError, NotUrlError


class FSM(StatesGroup):
    link = State()


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    await message.answer(text('–Ø –º–æ–≥—É –ø–æ—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ üöò –∏–∑ –ì–µ—Ä–º–∞–Ω–∏–∏ "–ø–æ–¥ –∫–ª—é—á" –≤ –†–§.',
                              f'\n\n–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω—É–∂–Ω–∞ {(italic("—Å—Å—ã–ª–∫–∞"))} –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–≤—Ç–æ.',
                              f'\n\n–ß—Ç–æ –±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá'),
                         reply_markup=start_markup,
                         parse_mode=ParseMode.MARKDOWN)


@dp.message_handler(commands=['help'])
async def process_help_command(message: types.Message):
    await message.answer(text(bold("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"),
                              "/start - –≤–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—á–∞–ª—É ‚è≠",
                              "/moderate - —Ä–µ–∂–∏–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ üñ• (–¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞)",
                              sep="\n"
                              ),
                         parse_mode=ParseMode.MARKDOWN)


@dp.callback_query_handler(text='calculate', state=None)
async def process_calculate_button(callback: CallbackQuery):
    await FSM.link.set()
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ–º–æ–µ –∞–≤—Ç–æ üöôüîç")
    await callback.answer()


@dp.callback_query_handler(text='cancel', state="*")
async def process_cancel_button(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(text("–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∞—Å –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ üòä",
                                       "–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—É ‚è≠",
                                       sep="\n\n"))
    await callback.answer()
    await state.finish()


@dp.message_handler(state=FSM.link)
async def process_link_input(message: types.Message, state: FSMContext):
    try:
        await message.answer(text('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å ‚è≥'))
        # get info about the car from https://www.mobile.de/
        car = await get_car_data(message.text)
        # calculate customs upon given car info
        customs = await calculate_customs(car)
        await message.answer(str(customs))
        await state.finish()
    except NotUrlError:
        await message.answer(text('–û–π ... –ö–∞–∂–µ—Ç—Å—è –í—ã –ø–µ—Ä–µ–¥–∞–ª–∏ –Ω–µ —Å—Å—ã–ª–∫—É ü§®',
                                  '–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —Å—Å—ã–ª–∫—É:',
                                  '‚óΩ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ—ë –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞ üåê',
                                  f'‚óΩ –∏–ª–∏ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ {(italic("–ø–æ–¥–µ–ª–∏—Ç—å—Å—è"))} –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ üì±',
                                  '–ò –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑',
                                  sep="\n\n"),
                             reply_markup=error_markup,
                             parse_mode=ParseMode.MARKDOWN)
    except AnotherUrlError:
        await message.answer(text('–ü–æ—Ö–æ–∂–µ –í—ã –ø–µ—Ä–µ–¥–∞–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –¥—Ä—É–≥–æ–π —Å–∞–π—Ç ü§î',
                                  '–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —Å—Å—ã–ª–∫—É:',
                                  '‚óΩ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ—ë –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞ üåê',
                                  f'‚óΩ –∏–ª–∏ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ {(italic("–ø–æ–¥–µ–ª–∏—Ç—å—Å—è"))} –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ üì±',
                                  '–ò –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑',
                                  sep="\n\n"),
                             reply_markup=error_markup,
                             parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        await message.answer(str(e))
        await message.answer(text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ... ü•¥",
                                  "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ üòî",
                                  sep="\n\n"))
        await state.finish()


@dp.message_handler()
async def process_other_commands(message: types.Message):
    await message.answer(text("–ù–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É üßê‚ùó",
                              "\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å /help üßæ"),
                         parse_mode=ParseMode.MARKDOWN)


def register_client_handlers(dp: Dispatcher):
    dp.register_message_handler(process_start_command)
    dp.register_message_handler(process_help_command)
    dp.register_callback_query_handler(process_calculate_button, state=None)
    dp.register_message_handler(process_link_input, state=FSM.link)
    dp.register_callback_query_handler(process_cancel_button, state="*")
    dp.register_message_handler(process_other_commands)
