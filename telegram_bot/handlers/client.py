from aiogram import types, Dispatcher
from aiogram.types import ParseMode, CallbackQuery
from aiogram.utils.markdown import text, italic, bold
from telegram_bot.init_bot import dp
from telegram_bot.inline_keyboard import start_markup


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    await message.answer(text('–Ø –º–æ–≥—É –ø–æ—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ üöò –∏–∑ –ì–µ—Ä–º–∞–Ω–∏–∏ "–ø–æ–¥ –∫–ª—é—á" –≤ –†–§.',
                              f'\n\n–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω—É–∂–Ω–∞ {(italic("—Å—Å—ã–ª–∫–∞"))} –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–≤—Ç–æ.',
                              f'\n\n–ß—Ç–æ –±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá'),
                         reply_markup=start_markup,
                         parse_mode=ParseMode.MARKDOWN)


@dp.message_handler(commands=['help'])
async def process_help_command(message: types.Message):
    await message.answer(text(bold("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"),
                              "/start - –≤–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—á–∞–ª—É ‚è≠",
                              "/moderate - —Ä–µ–∂–∏–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ üñ• (–¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞)",
                              sep="\n"
                              ),
                         parse_mode=ParseMode.MARKDOWN)


@dp.callback_query_handler(text="calculate")
async def process_calculate_button(callback: CallbackQuery):
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ–º–æ–µ –∞–≤—Ç–æ üöôüîç")


@dp.message_handler()
async def process_other_commands(message: types.Message):
    await message.answer(text("–ù–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É üßê‚ùó",
                              "\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å /help üßæ"),
                         parse_mode=ParseMode.MARKDOWN)


def register_client_handlers(dp: Dispatcher):
    dp.register_message_handler(process_start_command)
    dp.register_message_handler(process_help_command)
    dp.register_message_handler(process_other_commands)
