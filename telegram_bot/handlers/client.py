import datetime

from aiogram import types, Dispatcher
from aiogram.types import ParseMode, CallbackQuery
from aiogram.utils.markdown import text, italic, bold
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from loguru import logger

from telegram_bot.init_bot import dp
from telegram_bot.keyboards import start_markup, error_markup, car_info_markup, get_phone_markup, car_error_markup
from parser import get_car_data, calculate_customs, Car, Customs, engine_types
from exceptions import AnotherUrlError, NotUrlError, CarAttributeEmptyError
from parser import get_cbr_eu_rate
from databases import update_start_command_count, update_car_calculation_count, update_feedback_usage_count


class FSM(StatesGroup):
    link = State()


async def format_bot_output(car: Car, customs: Customs) -> str:
    if car.price_eu:
        output_text = text(str(bold(car.name.replace("*", "")).replace("\\", "")),
                           f"\n{bold('–î–≤–∏–≥–∞—Ç–µ–ª—å:')} {engine_types.get(car.engine)}, {car.value} —Å–º¬≥, {car.power} –ª.—Å.",
                           f"{bold('–î–∞—Ç–∞ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞ —É—á–µ—Ç:')} {car.age}",
                           f"{bold('–ü—Ä–æ–±–µ–≥:')} {car.mileage} –∫–º",
                           f"{'üõë –ë—ã–ª–∞ –≤ –î–¢–ü' if car.damaged else '‚úÖ –ù–µ –ø–æ–ø–∞–¥–∞–ª–∞ –≤ –î–¢–ü'}\n",
                           f"{bold('–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ: üí∏')}",
                           f"–í –ï–≤—Ä–æ: ‚Ç¨{car.price_eu:,} –±–µ–∑ –ù–î–° (‚Ç¨{car.price_with_vat_eu:,} —Å {car.vat}% –ù–î–°) –ù–î–°=‚Ç¨{car.price_with_vat_eu - car.price_eu:,}",
                           f"–í –†—É–±–ª—è—Ö: ‚ÇΩ{car.price_ru:,} –±–µ–∑ –ù–î–° (‚ÇΩ{car.price_with_vat_ru:,} —Å {car.vat}% –ù–î–°) –ù–î–°=‚ÇΩ{car.price_with_vat_ru - car.price_ru:,}",
                           f"\n{bold('–¢–∞–º–æ–∂–µ–Ω–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≤ –†–§:')}",
                           f"{bold('–¢–∞–º–æ–∂–µ–Ω–Ω—ã–π —Å–±–æ—Ä:')} ‚ÇΩ{customs.sbor:,}",
                           f"{bold('–ü–æ—à–ª–∏–Ω–∞:')} ‚ÇΩ{customs.tax:,}",
                           f"{bold('–£—Ç–∏–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–±–æ—Ä:')} ‚ÇΩ{customs.util:,}\n",
                           f"{bold('–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –°–ë–ö–¢–° –∏ –≠–ü–¢–°:')} ~ ‚ÇΩ{customs.dop:,}\n",
                           bold(f'–ò—Ç–æ–≥–æ: ‚ÇΩ{car.price_ru + customs.total:,} üöô\n'),
                           f"–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞: {datetime.datetime.today().date()}, –∫—É—Ä—Å –¶–ë 1‚Ç¨ = {await get_cbr_eu_rate()}‚ÇΩ",
                           str(italic(
                               f"*—Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω —Å —É—á–µ—Ç–æ–º –∫—É—Ä—Å–∞ –¶–ë –Ω–∞ –¥–µ–Ω—å –∑–∞–ø—Ä–æ—Å–∞ +{customs.exchange_div}% (–∫—É—Ä—Å –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤). "
                               "–í —Ä–∞—Å—á–µ—Ç –Ω–µ –≤–∫–ª—é—á–µ–Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –∞–≤—Ç–æ, —É—Å–ª—É–≥ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ù–î–°, —É—Å–ª—É–≥ –±—Ä–æ–∫–µ—Ä–æ–≤ –∏ –¥—Ä. "
                               "–≤–æ–∑–º–æ–∂–Ω—ã—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π.")).replace("\\", ""),
                           sep="\n")
    else:
        output_text = text(
            f"‚ùó{bold('–ú–∞—à–∏–Ω–∞ –ø—Ä–æ–¥–∞–µ—Ç—Å—è –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ù–î–°')}‚ùó",
            str(italic(
                "*–¢–∞–∫–∞—è –ø–æ–∫—É–ø–∫–∞ –Ω–µ –≤—Å–µ–≥–¥–∞ –≤—ã–≥–æ–¥–Ω–∞. "
                "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏—Å–∫–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤–æ–∑–≤—Ä–∞—Ç–∞ –ù–î–°. –ö–∞–∫ –ø—Ä–∞–≤–∏–ª–æ –ø—Ä–æ–¥–∞–≤—Ü—ã —Ç–∞–∫–∏—Ö "
                "–∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π - –∞–≤—Ç–æ—Å–∞–ª–æ–Ω—ã.\n")).replace("\\", ""),
            str(bold(car.name.replace("*", "")).replace("\\", "")),
            f"\n{bold('–î–≤–∏–≥–∞—Ç–µ–ª—å:')} {engine_types.get(car.engine)}, {car.value} —Å–º¬≥, {car.power} –ª.—Å.",
            f"{bold('–î–∞—Ç–∞ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞ —É—á–µ—Ç:')} {car.age}",
            f"{bold('–ü—Ä–æ–±–µ–≥:')} {car.mileage} –∫–º",
            f"{'üõë –ë—ã–ª–∞ –≤ –î–¢–ü' if car.damaged else '‚úÖ –ù–µ –ø–æ–ø–∞–¥–∞–ª–∞ –≤ –î–¢–ü'}\n",
            f"{bold('–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ: üí∏')}",
            f"–í –ï–≤—Ä–æ: ‚Ç¨{car.price_with_vat_eu:,}",
            f"–í –†—É–±–ª—è—Ö: ‚ÇΩ{car.price_with_vat_ru:,}",
            f"\n{bold('–¢–∞–º–æ–∂–µ–Ω–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≤ –†–§:')}",
            f"{bold('–¢–∞–º–æ–∂–µ–Ω–Ω—ã–π —Å–±–æ—Ä:')} ‚ÇΩ{customs.sbor:,}",
            f"{bold('–ü–æ—à–ª–∏–Ω–∞:')} ‚ÇΩ{customs.tax:,}",
            f"{bold('–£—Ç–∏–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–±–æ—Ä:')} ‚ÇΩ{customs.util:,}\n",
            f"{bold('–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –°–ë–ö–¢–° –∏ –≠–ü–¢–°:')} ~ ‚ÇΩ{customs.dop:,}\n",
            bold(f'–ò—Ç–æ–≥–æ: ‚ÇΩ{car.price_with_vat_ru + customs.total:,} üöô\n'),
            f"–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞: {datetime.datetime.today().date()}, –∫—É—Ä—Å –¶–ë 1‚Ç¨ = {await get_cbr_eu_rate()}‚ÇΩ",
            str(italic(
                f"*—Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω —Å —É—á–µ—Ç–æ–º –∫—É—Ä—Å–∞ –¶–ë –Ω–∞ –¥–µ–Ω—å –∑–∞–ø—Ä–æ—Å–∞ +{customs.exchange_div}% (–∫—É—Ä—Å –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤). "
                "–í —Ä–∞—Å—á–µ—Ç –Ω–µ –≤–∫–ª—é—á–µ–Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –∞–≤—Ç–æ, —É—Å–ª—É–≥ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ù–î–°, —É—Å–ª—É–≥ –±—Ä–æ–∫–µ—Ä–æ–≤ –∏ –¥—Ä. "
                "–≤–æ–∑–º–æ–∂–Ω—ã—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π.")).replace("\\", ""),
            sep="\n")
    return output_text


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    await message.answer(text('–Ø –º–æ–≥—É –ø–æ—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ üöò –∏–∑ –ì–µ—Ä–º–∞–Ω–∏–∏ "–ø–æ–¥ –∫–ª—é—á" –≤ –†–§.',
                              f'\n\n–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω—É–∂–Ω–∞ {(italic("—Å—Å—ã–ª–∫–∞"))} –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–≤—Ç–æ.',
                              f'\n\n–ß—Ç–æ –±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá'),
                         reply_markup=start_markup,
                         parse_mode=ParseMode.MARKDOWN)
    update_start_command_count(message.from_user.id)


@dp.message_handler(commands=['help'])
async def process_help_command(message: types.Message):
    await message.answer(text(bold("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"),
                              "/start - –≤–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—á–∞–ª—É ‚¨Ü",
                              "/moderate - —Ä–µ–∂–∏–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ üñ• (–¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞)",
                              sep="\n"
                              ),
                         parse_mode=ParseMode.MARKDOWN)


@dp.callback_query_handler(text='another', state=None)
@dp.callback_query_handler(text='retry', state=None)
@dp.callback_query_handler(text='calculate', state=None)
async def process_calculate_button(callback: CallbackQuery):
    await FSM.link.set()
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ–º–æ–µ –∞–≤—Ç–æ üöôüîç")
    await callback.answer()
    update_car_calculation_count(callback.from_user.id)


@dp.message_handler(state=FSM.link)
async def process_link_input(message: types.Message, state: FSMContext):
    try:
        await message.answer(text('–í—ã–ø–æ–ª–Ω—è—é –∑–∞–ø—Ä–æ—Å ‚è≥'))

        logger.info(f'Processing "{message.text}" request ...')
        # get info about the car from https://www.mobile.de/
        car = await get_car_data(message.text)
        # calculate customs upon given car info
        customs = await calculate_customs(car)
        await message.answer(await format_bot_output(car, customs),
                             parse_mode=ParseMode.MARKDOWN,
                             reply_markup=car_info_markup)
    except NotUrlError as ex:
        logger.error(ex)
        await message.answer(text('–û–π ... –ö–∞–∂–µ—Ç—Å—è –í—ã –ø–µ—Ä–µ–¥–∞–ª–∏ –Ω–µ —Å—Å—ã–ª–∫—É ü§®',
                                  '–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —Å—Å—ã–ª–∫—É:',
                                  '‚óΩ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ—ë –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞ üåê',
                                  f'‚óΩ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π {(italic("–ø–æ–¥–µ–ª–∏—Ç—å—Å—è"))} –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ üì±',
                                  sep="\n\n"),
                             reply_markup=error_markup,
                             parse_mode=ParseMode.MARKDOWN)
    except AnotherUrlError as ex:
        logger.error(ex)
        await message.answer(text('–ü–æ—Ö–æ–∂–µ –í—ã –ø–µ—Ä–µ–¥–∞–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –¥—Ä—É–≥–æ–π —Å–∞–π—Ç ü§î',
                                  '–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —Å—Å—ã–ª–∫—É:',
                                  '‚óΩ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ—ë –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞ üåê',
                                  f'‚óΩ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π {(italic("–ø–æ–¥–µ–ª–∏—Ç—å—Å—è"))} –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ üì±',
                                  sep="\n\n"),
                             reply_markup=error_markup,
                             parse_mode=ParseMode.MARKDOWN)
    except AttributeError as ex:
        logger.error(ex)
        await message.answer(text('–ü–æ—Ö–æ–∂–µ –í—ã –ø–µ—Ä–µ–¥–∞–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–∞–π—Ç–∞ mobile.de –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—â—É—é –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–≤—Ç–æ '
                                  'ü§î',
                                  '–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —Å—Å—ã–ª–∫—É:',
                                  '‚óΩ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ—ë –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞ üåê',
                                  f'‚óΩ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π {(italic("–ø–æ–¥–µ–ª–∏—Ç—å—Å—è"))} –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ üì±',
                                  sep="\n\n"),
                             reply_markup=error_markup,
                             parse_mode=ParseMode.MARKDOWN)
    except CarAttributeEmptyError as ex:
        logger.error(type(ex))
        logger.error(ex)
        await message.answer(text(f'–ü–æ—Ö–æ–∂–µ, —á—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –í—ã –ø–µ—Ä–µ–¥–∞–ª–∏, –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ "{italic(ex)}" '
                                  f'–Ω—É–∂–Ω–æ–≥–æ '
                                  f'–¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤ üõë',
                                  '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ –º–æ–∂–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–ª—è –Ω–µ–≥–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å ... üòî',
                                  sep="\n\n"),
                             reply_markup=car_error_markup,
                             parse_mode=ParseMode.MARKDOWN)
    except Exception as ex:
        logger.error(type(ex))
        logger.error(ex)
        await message.answer(text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ... ü•¥",
                                  "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ üòî",
                                  sep="\n\n"),
                             reply_markup=error_markup
                             )
    finally:
        await state.finish()


@dp.callback_query_handler(text='call')
async def process_call_button(callback: CallbackQuery):
    await callback.message.answer(text("+74993894054"), reply_markup=get_phone_markup)
    await callback.answer()
    update_feedback_usage_count(callback.from_user.id)


@dp.callback_query_handler(text='cancel', state="*")
async def process_cancel_button(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(text("–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∞—Å –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ üòä",
                                       "–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—É ‚¨Ü",
                                       sep="\n\n"))
    await callback.answer()
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()


def register_client_handlers(dp: Dispatcher):
    dp.register_message_handler(process_start_command, commands=['start'])
    dp.register_message_handler(process_help_command, commands=['help'])
    dp.register_callback_query_handler(process_calculate_button, state=None)
    dp.register_message_handler(process_link_input, state=FSM.link)
    dp.register_callback_query_handler(process_cancel_button, state="*")
